+1.Страница логина ( логин пароль ), и проверка их
--	1.1. Сделать регистрацию( если возможно бо в планах не использовать сервер и бэкенд вообще)
+	1.2. хранить авторизацию в локал сторедж, и если перезагруженно чо бы сначала проверяло наличие а потом если
+	 	    ненайдено заново регистрировало
+при открытие страници запуск скрипта, который проверяет авторизован ли юзер, если нет, логин, если да, то туду

2. сам туду лист ( с отдельным URL)
	!! Удаление
	!! редактирование
	!! Пометка важно
	!! Поиск по дате
	!! Поиск по Важным
	!! Корзина ( через определенное время сама очищается )
	!! Выполнено
	!! Не выполнено
	!! Просрочено ( + напоминание)
	ФИЛЬТРЫ
		над списком записей должны быть кнопки фильтров “незавершенные”, “завершенные”, все
		по нажатию на “завершенные” в списке должны отображаться только те записи которые были завершены 
		по нажатию на “незавершенные” в списке должны отображаться только те записи которые не были завершены 
		по нажатию на “все” в списке должны отображаться все записи

	
использование паттернов для организации кода (singleton для хранения данных об авторизации,
 observer для отслеживание изменения состояния
 (который динамически загружает JavaScript-модули, основываясь на изменениях DOM???мбДАмбНЕ) и перерисовки dom и т.д.)



при появлении компонента todo списка, все записи должны быть
    подгружены с backend при помощи соответствующего get ajax запроса

после добавления новой записи на backend должен быть послан соответствующий post ajax запрос
после удаления записи на backend должен быть послан соответствующий delete ajax запрос
после отметки о завершении записи на backend должен быть послан соответствующий put ajax запрос
после редактирования записи на backend должен быть послан соответствующий put ajax запрос

справа от списка должны быть счетчики всех записей, завершенных, незавершенных
	счетчики должны обновляться динамически при добавлении/удалении записей, а также при отметке завершения


все ui элементы должны быть разделены по отдельным классам/функциям.
	класс ui компонента должен отвечать только за отображение информации в dom и за dom манипуляции, и не должен хранить
	   данные или состояние todo списка
	класс ui компонента не должен самостоятельно обновлять данные или изменять содержимое todo списка
	ui компоненты могут генерировать сообщения для класса хранения состояни (о нем далее)
	ui компоненты могут подписываться на изменения состояния из класса хранения состояни (о нем далее)

	ПРИМЕР РАЗДЕЛЕНИЯ ПО КЛАССАМ
		компонент формы логина
		компонент ввода нового элемента списка
		компонент списка
		компонент элемента списка
		компонент кнопок (которые отображаются на элементе при наведении)
		и т.д.


за манипуляцию данными должен отвечать отдельный класс
    класс должен хранить данные о todo списке
    должен иметь интерфейс для прослушки сообщений, и изменять свое состояние в соответствии с конкретным сообщением
    класс должен предоставлять возможность подписки на изменение состояния

удаление ( Если быстро нажимать случается 404 ошибка)
 и изменение нового задания
    когда наводишь, есть редактирование, и можно ввести дискрипшин